From 30b60008caab2a57629fb71192196dc15fddbbd3 Mon Sep 17 00:00:00 2001
From: Thiago Macieira <thiago.macieira@intel.com>
Date: Tue, 29 Jan 2019 10:15:14 -0800
Subject: [PATCH] Add support for a configuration file for the PAC parser
 script

The configuration file is /usr/share/defaults/etc/redsocks-pac.conf,
overridden by /etc/redsocks-pac.conf. Supported configurations are:

Section "General": ServerPort:
The local port redsocks will listen on. Default: 1023 (a privileged port to
avoid another process hijacking all traffic).

Section "General": RuntimeDir:
The directory to create the redsocks.conf file, usually in /run. Must match
the configuration file in redsocks-managed.service. The directory is created
if it does not exist. Default: /run/pacrunner.

Signed-off-by: Thiago Macieira <thiago.macieira@intel.com>
---
 parse-pac.pl | 52 +++++++++++++++++++++++++++++++++++++++++++++-------
 1 file changed, 45 insertions(+), 7 deletions(-)

diff --git a/parse-pac.pl b/parse-pac.pl
index 5ea17cc..332b747 100755
--- a/parse-pac.pl
+++ b/parse-pac.pl
@@ -1,11 +1,44 @@
 #!/usr/bin/perl
 use strict;
+use Config::Tiny;
 use Sys::Syslog qw(:standard :macros);
 
 # Global variables
-my $redsocksport = 1023;
-my $runtimedir = "/run/pacrunner";
-my $pacurl = shift @ARGV or die("Need proxy script URL");
+my $Config;
+
+sub loadConfig() {
+    sub mergeHash($$) {
+        my ($cfg, $add) = @_;
+        while (my ($key, $value) = each(%{$add})) {
+            my $curvalue = \$$cfg->{$key};
+            if (ref($value) eq "HASH" && ref($$curvalue) eq "HASH") {
+                mergeHash($curvalue, $value);
+            } else {
+                $$curvalue = $value;
+            }
+        }
+    }
+
+    # prepopulate defaults:
+    my $defaultcfg = <<'ENDCFG';
+[General]
+ServerPort = 1023
+RuntimeDir = /run/pacrunner
+ENDCFG
+    $Config = Config::Tiny->read_string($defaultcfg);
+
+    my @configfiles = qw{
+        /usr/share/defaults/etc/redsocks-pac.conf
+        /etc/redsocks-pac.conf
+    };
+    for my $cfgfile (@configfiles) {
+        my $cfg = Config::Tiny->read($cfgfile);
+        next unless defined($cfg);
+
+        # merge the configs
+        mergeHash(\$Config, $cfg);
+    }
+}
 
 sub run(@) {
     my @lines;
@@ -20,8 +53,9 @@ sub run(@) {
     return @lines;
 }
 
-sub downloadWPAD() {
+sub downloadWPAD($) {
     # Download using CURL
+    my ($pacurl) = @_;
     $pacurl = "file://$pacurl" if $pacurl =~ m,^/,; # not entirely correct
     return run("curl", "-s", "--connect-timeout", "25", "$pacurl");
 }
@@ -148,6 +182,8 @@ sub createRedsocksConf($) {
         die("Unknown proxy type: $proxy");
     }
 
+    my $redsocksport = $Config->{General}{ServerPort};
+    my $runtimedir = $Config->{General}{RuntimeDir};
     mkdir $runtimedir, 0755;
     open CONF, ">", "$runtimedir/redsocks.conf"
         or die("Could not open $runtimedir/redsocks.conf for writing: $!");
@@ -171,9 +207,11 @@ END_CONF
     close CONF or die("Could not save $runtimedir/redsocks.conf: $!");
 }
 
-openlog("parse-pac.ply", "pid,perror", LOG_LOCAL0);
+openlog("parse-pac.pl", "pid,perror", LOG_LOCAL0);
 
-my @wpad = downloadWPAD();
+loadConfig();
+my $pacurl = shift @ARGV or die("Need proxy script URL");
+my @wpad = downloadWPAD($pacurl);
 my @networks;
 @networks = calculateNets(\@wpad) if scalar @wpad;
 my $proxying = !!@networks;
@@ -188,7 +226,7 @@ $proxying = 0 if $proxy eq "direct://";
 system("ip route flush cache");
 system("ipset create proxy hash:net family inet 2>/dev/null");
 
-my $iptables_rule = "-p tcp -m set \! -o lo \! --match-set proxy dst -j REDIRECT --to-ports $redsocksport";
+my $iptables_rule = "-p tcp -m set \! -o lo \! --match-set proxy dst -j REDIRECT --to-ports " . $Config->{General}{ServerPort};
 system("iptables -t nat -D OUTPUT $iptables_rule 2>/dev/null");
 system("iptables -t nat -A OUTPUT $iptables_rule");
 
-- 
2.20.1

